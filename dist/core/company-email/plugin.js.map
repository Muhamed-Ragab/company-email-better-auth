{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../../src/core/company-email/plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BetterAuthPlugin } from \"better-auth\";\r\nimport { APIError } from \"better-auth/api\";\r\nimport { generateRandomString } from \"better-auth/crypto\";\r\nimport { createAuthEndpoint } from \"better-auth/plugins\";\r\nimport { z } from \"zod\";\r\n\r\nimport CompanyEmailValidator from \"company-email-validator\";\r\n\r\nimport {\r\n  checkCompanyEmailMetadata,\r\n  sendEmailVerificationMetadata,\r\n  verifyEmailMetadata,\r\n} from \"./metadata\";\r\nimport type { VerificationOptions } from \"./types\";\r\n\r\n/**\r\n * Plugin for company email verification\r\n * @param options Options for the verification plugin\r\n * @returns Plugin for company email verification\r\n */\r\nexport const companyEmail = (\r\n  {\r\n    expiresIn = 60 * 60 * 24,\r\n    disableCleanup = false,\r\n    allowedEmails = [],\r\n    generateToken = () => generateRandomString(32),\r\n    storeCookieAfterVerification = {\r\n      enabled: false,\r\n      cookieName: \"temp-verification\",\r\n      expires: 60 * 60 * 24,\r\n    },\r\n    sendEmailVerification,\r\n  }: VerificationOptions = {} as VerificationOptions\r\n) =>\r\n  ({\r\n    id: \"company-email\",\r\n    endpoints: {\r\n      sendEmailVerification: createAuthEndpoint(\r\n        \"/company-email/send-verification-email\",\r\n        {\r\n          method: \"POST\",\r\n          metadata: sendEmailVerificationMetadata,\r\n          body: z.object({\r\n            email: z.string({ message: \"Email is required\" }).email({\r\n              message: \"Invalid email\",\r\n            }),\r\n            callbackUrl: z\r\n              .string({\r\n                message: \"Invalid callback URL\",\r\n                description: \"Callback URL after email verification\",\r\n              })\r\n              .url({ message: \"Invalid callback URL\" })\r\n              .optional(),\r\n          }),\r\n        },\r\n        async (ctx) => {\r\n          try {\r\n            const { email, callbackUrl } = ctx.body;\r\n\r\n            const isCompanyEmail = CompanyEmailValidator.isCompanyEmail(email);\r\n\r\n            if (!isCompanyEmail && !allowedEmails.includes(email)) {\r\n              throw new APIError(\"BAD_REQUEST\", {\r\n                message: \"Email is not a company email\",\r\n              });\r\n            }\r\n\r\n            const token = await generateToken();\r\n\r\n            await ctx.context.adapter.delete({\r\n              model: \"verification\",\r\n              where: [\r\n                {\r\n                  field: \"value\",\r\n                  operator: \"eq\",\r\n                  value: email,\r\n                },\r\n              ],\r\n            });\r\n\r\n            await ctx.context.internalAdapter.createVerificationValue({\r\n              identifier: token,\r\n              value: email,\r\n              expiresAt: new Date(new Date().setSeconds(expiresIn)),\r\n            });\r\n\r\n            await sendEmailVerification({\r\n              email,\r\n              url: callbackUrl || ctx.context.baseURL,\r\n              token,\r\n            });\r\n\r\n            return { success: true };\r\n          } catch (error) {\r\n            if (error instanceof APIError) {\r\n              throw error;\r\n            }\r\n\r\n            throw new APIError(\"INTERNAL_SERVER_ERROR\", {\r\n              message: \"Failed to send verification email\",\r\n            });\r\n          }\r\n        }\r\n      ),\r\n      verifyEmailVerification: createAuthEndpoint(\r\n        \"/company-email/verify-email\",\r\n        {\r\n          method: \"GET\",\r\n          metadata: verifyEmailMetadata,\r\n          query: z.object({\r\n            token: z.string({\r\n              message: \"Invalid token\",\r\n              description: \"Token to verify email\",\r\n            }),\r\n            redirectTo: z\r\n              .string({ message: \"Invalid redirect path\" })\r\n              .optional(),\r\n          }),\r\n        },\r\n        async (ctx) => {\r\n          try {\r\n            const { token, redirectTo } = ctx.query;\r\n\r\n            const verification =\r\n              await ctx.context.internalAdapter.findVerificationValue(token);\r\n\r\n            if (!verification || verification.expiresAt < new Date()) {\r\n              throw new APIError(\"BAD_REQUEST\", {\r\n                message: \"Invalid or expired verification token\",\r\n              });\r\n            }\r\n\r\n            if (storeCookieAfterVerification.enabled) {\r\n              const generatedToken = await generateToken();\r\n              await ctx.context.internalAdapter.createVerificationValue({\r\n                identifier: generatedToken,\r\n                value: verification.value,\r\n                expiresAt: new Date(new Date().setHours(24)),\r\n              });\r\n\r\n              ctx.setCookie(\r\n                storeCookieAfterVerification.cookieName || \"temp-verification\",\r\n                generatedToken,\r\n                {\r\n                  httpOnly: true,\r\n                  secure: true,\r\n                  sameSite: \"strict\",\r\n                  path: \"/\",\r\n                  expires: new Date(new Date().setHours(24)), // 1 day\r\n                }\r\n              );\r\n            }\r\n\r\n            if (!disableCleanup) {\r\n              await ctx.context.internalAdapter.deleteVerificationValue(\r\n                verification.id\r\n              );\r\n            }\r\n\r\n            if (redirectTo) {\r\n              ctx.redirect(redirectTo);\r\n            }\r\n\r\n            return { success: true };\r\n          } catch (error) {\r\n            if (error instanceof APIError) {\r\n              throw error;\r\n            }\r\n\r\n            throw new APIError(\"INTERNAL_SERVER_ERROR\", {\r\n              message: \"Failed to verify email\",\r\n            });\r\n          }\r\n        }\r\n      ),\r\n      checkCompanyEmail: createAuthEndpoint(\r\n        \"/company-email/check\",\r\n        {\r\n          method: \"POST\",\r\n          metadata: checkCompanyEmailMetadata,\r\n        },\r\n        async (ctx) => {\r\n          const { email } = ctx.body;\r\n\r\n          const isCompanyEmail = CompanyEmailValidator.isCompanyEmail(email);\r\n\r\n          if (!isCompanyEmail) {\r\n            throw new APIError(\"BAD_REQUEST\", {\r\n              message: \"Email is not a company email\",\r\n            });\r\n          }\r\n\r\n          return { success: true };\r\n        }\r\n      ),\r\n    },\r\n  } satisfies BetterAuthPlugin);\r\n"]}