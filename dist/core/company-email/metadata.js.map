{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../src/core/company-email/metadata.ts"],"names":[],"mappings":"AAEA,MAAM,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC;AAE/B,MAAM,CAAC,MAAM,6BAA6B,GAAoC;IAC5E,OAAO,EAAE;QACP,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,yBAAyB;QAClC,WAAW,EAAE,qDAAqD;QAClE,WAAW,EAAE,uBAAuB;QACpC,WAAW,EAAE;YACX,OAAO,EAAE;gBACP,kBAAkB,EAAE;oBAClB,MAAM,EAAE;wBACN,IAAI,EAAE,QAAQ;wBACd,UAAU,EAAE;4BACV,KAAK,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,QAAQ,EAAE,IAAI;6BACf;4BACD,WAAW,EAAE;gCACX,IAAI,EAAE,QAAQ;gCACd,QAAQ,EAAE,KAAK;6BAChB;yBACF;qBACF;iBACF;aACF;SACF;QACD,SAAS,EAAE;YACT,GAAG,EAAE;gBACH,WAAW,EAAE,yBAAyB;gBACtC,OAAO,EAAE;oBACP,kBAAkB,EAAE;wBAClB,MAAM,EAAE;4BACN,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,OAAO,EAAE;oCACP,IAAI,EAAE,SAAS;iCAChB;6BACF;yBACF;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAoC;IAClE,OAAO,EAAE;QACP,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,cAAc;QACvB,WAAW,EAAE,0CAA0C;QACvD,WAAW,EAAE,aAAa;QAC1B,UAAU,EAAE;YACV;gBACE,EAAE,EAAE,OAAO;gBACX,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,IAAI;gBACd,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;iBACf;aACF;YACD;gBACE,EAAE,EAAE,OAAO;gBACX,IAAI,EAAE,YAAY;gBAClB,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE;oBACN,IAAI,EAAE,QAAQ;iBACf;aACF;SACF;QACD,SAAS,EAAE;YACT,GAAG,EAAE;gBACH,WAAW,EAAE,6BAA6B;gBAC1C,OAAO,EAAE;oBACP,kBAAkB,EAAE;wBAClB,MAAM,EAAE;4BACN,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,OAAO,EAAE;oCACP,IAAI,EAAE,SAAS;iCAChB;6BACF;yBACF;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAoC;IACxE,OAAO,EAAE;QACP,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,qBAAqB;QAC9B,WAAW,EAAE,uCAAuC;QACpD,WAAW,EAAE,mBAAmB;QAChC,WAAW,EAAE;YACX,OAAO,EAAE;gBACP,kBAAkB,EAAE;oBAClB,MAAM,EAAE;wBACN,IAAI,EAAE,QAAQ;wBACd,UAAU,EAAE;4BACV,KAAK,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,QAAQ,EAAE,IAAI;6BACf;yBACF;qBACF;iBACF;aACF;SACF;QACD,SAAS,EAAE;YACT,GAAG,EAAE;gBACH,WAAW,EAAE,0BAA0B;gBACvC,OAAO,EAAE;oBACP,kBAAkB,EAAE;wBAClB,MAAM,EAAE;4BACN,IAAI,EAAE,QAAQ;4BACd,UAAU,EAAE;gCACV,OAAO,EAAE;oCACP,IAAI,EAAE,SAAS;iCAChB;6BACF;yBACF;qBACF;iBACF;aACF;SACF;KACF;CACF,CAAC","sourcesContent":["import type { Endpoint } from \"better-auth\";\r\n\r\nconst TAGS = [\"Company-email\"];\r\n\r\nexport const sendEmailVerificationMetadata: Endpoint[\"options\"][\"metadata\"] = {\r\n  openapi: {\r\n    tags: TAGS,\r\n    summary: \"Send verification email\",\r\n    description: \"Send verification email to the user's email address\",\r\n    operationId: \"sendVerificationEmail\",\r\n    requestBody: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              email: {\r\n                type: \"string\",\r\n                required: true,\r\n              },\r\n              callbackUrl: {\r\n                type: \"string\",\r\n                required: false,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      200: {\r\n        description: \"Email sent successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                success: {\r\n                  type: \"boolean\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const verifyEmailMetadata: Endpoint[\"options\"][\"metadata\"] = {\r\n  openapi: {\r\n    tags: TAGS,\r\n    summary: \"Verify email\",\r\n    description: \"Verify email to the user's email address\",\r\n    operationId: \"verifyEmail\",\r\n    parameters: [\r\n      {\r\n        in: \"query\",\r\n        name: \"token\",\r\n        required: true,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n      {\r\n        in: \"query\",\r\n        name: \"redirectTo\",\r\n        required: false,\r\n        schema: {\r\n          type: \"string\",\r\n        },\r\n      },\r\n    ],\r\n    responses: {\r\n      200: {\r\n        description: \"Email verified successfully\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                success: {\r\n                  type: \"boolean\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport const checkCompanyEmailMetadata: Endpoint[\"options\"][\"metadata\"] = {\r\n  openapi: {\r\n    tags: TAGS,\r\n    summary: \"Check company email\",\r\n    description: \"Check if the email is a company email\",\r\n    operationId: \"checkCompanyEmail\",\r\n    requestBody: {\r\n      content: {\r\n        \"application/json\": {\r\n          schema: {\r\n            type: \"object\",\r\n            properties: {\r\n              email: {\r\n                type: \"string\",\r\n                required: true,\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responses: {\r\n      200: {\r\n        description: \"Email is a company email\",\r\n        content: {\r\n          \"application/json\": {\r\n            schema: {\r\n              type: \"object\",\r\n              properties: {\r\n                success: {\r\n                  type: \"boolean\",\r\n                },\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n};\r\n"]}